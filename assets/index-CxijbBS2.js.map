{"version":3,"file":"index-CxijbBS2.js","sources":["../../src/composables/useSpeechRecognition.ts","../../src/composables/useTranslation.ts","../../src/composables/useHistory.ts","../../src/App.vue","../../src/main.ts"],"sourcesContent":["import { ref } from 'vue'\r\n\r\ninterface IWindow extends Window {\r\n  webkitSpeechRecognition: any;\r\n}\r\n\r\ninterface SpeechRecognitionResult {\r\n  isFinal: boolean;\r\n  [key: number]: {\r\n    transcript: string;\r\n  };\r\n}\r\n\r\ninterface SpeechRecognitionResults {\r\n  resultIndex: number;\r\n  results: {\r\n    [key: number]: SpeechRecognitionResult;\r\n    length: number;\r\n  };\r\n}\r\n\r\ntype SpeechRecognitionEvent = {\r\n  resultIndex: number;\r\n  results: SpeechRecognitionResults['results'];\r\n}\r\n\r\ntype SpeechRecognitionErrorEvent = {\r\n  error: string;\r\n}\r\n\r\nexport function useSpeechRecognition() {\r\n  const isRecording = ref(false)\r\n  const currentText = ref('')\r\n  const interimText = ref('') // 用于存储临时识别结果\r\n  let recognition: any = null\r\n\r\n  // 初始化语音识别\r\n  const initRecognition = () => {\r\n    if (!('webkitSpeechRecognition' in window)) {\r\n      alert('您的浏览器不支持语音识别功能')\r\n      return false\r\n    }\r\n\r\n    recognition = new ((window as unknown as IWindow).webkitSpeechRecognition)()\r\n    recognition.continuous = true\r\n    recognition.interimResults = true\r\n    recognition.lang = 'en-US'\r\n\r\n    recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n      let finalTranscript = ''\r\n      let interimTranscript = ''\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript += event.results[i][0].transcript\r\n        } else {\r\n          interimTranscript += event.results[i][0].transcript\r\n        }\r\n      }\r\n\r\n      // 更新临时识别结果\r\n      if (interimTranscript) {\r\n        interimText.value = interimTranscript\r\n      }\r\n\r\n      // 当有最终结果时，追加到当前文本并清空临时结果\r\n      if (finalTranscript) {\r\n        currentText.value += (currentText.value ? ' ' : '') + finalTranscript\r\n        interimText.value = ''\r\n      }\r\n    }\r\n\r\n    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\r\n      console.error('语音识别错误:', event.error)\r\n      stopRecording()\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  // 开始录音\r\n  const startRecording = () => {\r\n    if (!recognition && !initRecognition()) {\r\n      return\r\n    }\r\n    \r\n    currentText.value = '' // 清空之前的内容\r\n    interimText.value = ''\r\n    recognition?.start()\r\n    isRecording.value = true\r\n  }\r\n\r\n  // 停止录音\r\n  const stopRecording = () => {\r\n    recognition?.stop()\r\n    isRecording.value = false\r\n    interimText.value = '' // 清空临时结果\r\n  }\r\n\r\n  return {\r\n    isRecording,\r\n    currentText,\r\n    interimText,\r\n    startRecording,\r\n    stopRecording\r\n  }\r\n} ","import { ref } from 'vue'\r\n\r\nconst API_KEY = import.meta.env.VITE_AZURE_API_KEY\r\nconst REGION = import.meta.env.VITE_AZURE_REGION\r\n\r\n// 文本格式化工具函数\r\nfunction formatTranslatedText(text: string): string {\r\n  if (!text) return ''\r\n  \r\n  return text\r\n    // 将英文标点替换为中文标点\r\n    .replace(/\\./g, '。')\r\n    .replace(/,/g, '，')\r\n    .replace(/\\?/g, '？')\r\n    .replace(/!/g, '！')\r\n    .replace(/:/g, '：')\r\n    .replace(/;/g, '；')\r\n    // 处理括号\r\n    .replace(/\\(/g, '（')\r\n    .replace(/\\)/g, '）')\r\n    // 处理引号\r\n    .replace(/\"/g, '\\u201c')  // 替换为中文左引号\r\n    .replace(/'/g, '\\u2018')  // 替换为中文左单引号\r\n    // 删除多余空格\r\n    .replace(/\\s+/g, ' ')\r\n    .trim()\r\n    // 确保句子之间有适当的空格\r\n    .replace(/([。！？])\\s*/g, '$1\\n')\r\n    // 删除连续的换行\r\n    .replace(/\\n+/g, '\\n')\r\n    .trim()\r\n}\r\n\r\nexport function useTranslation() {\r\n  const translatedText = ref('')\r\n  const isTranslating = ref(false)\r\n\r\n  const translate = async (text: string): Promise<string> => {\r\n    if (!text.trim()) {\r\n      return ''\r\n    }\r\n\r\n    isTranslating.value = true\r\n    try {\r\n      const response = await fetch(\r\n        'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=en&to=zh-Hans',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Ocp-Apim-Subscription-Key': API_KEY,\r\n            'Ocp-Apim-Subscription-Region': REGION,\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify([{ text }]),\r\n        }\r\n      )\r\n\r\n      if (!response.ok) {\r\n        throw new Error('翻译请求失败')\r\n      }\r\n\r\n      const data = await response.json()\r\n      const result = data[0]?.translations[0]?.text || ''\r\n      // 对翻译结果进行格式化\r\n      const formattedResult = formatTranslatedText(result)\r\n      translatedText.value = formattedResult\r\n      return formattedResult\r\n    } catch (error) {\r\n      console.error('翻译错误:', error)\r\n      return '翻译失败，请重试'\r\n    } finally {\r\n      isTranslating.value = false\r\n    }\r\n  }\r\n\r\n  return {\r\n    translatedText,\r\n    isTranslating,\r\n    translate\r\n  }\r\n} ","import { ref } from 'vue'\r\n\r\nexport interface TranslationRecord {\r\n  original: string\r\n  translated: string\r\n  timestamp: number\r\n}\r\n\r\nconst STORAGE_KEY = 'translation_history'\r\nconst MAX_HISTORY_LENGTH = 50\r\n\r\nexport function useHistory() {\r\n  const history = ref<TranslationRecord[]>([])\r\n\r\n  // 从本地存储加载历史记录\r\n  const loadHistory = () => {\r\n    try {\r\n      const savedHistory = localStorage.getItem(STORAGE_KEY)\r\n      if (savedHistory) {\r\n        history.value = JSON.parse(savedHistory)\r\n      }\r\n    } catch (error) {\r\n      console.error('加载历史记录失败:', error)\r\n    }\r\n  }\r\n\r\n  // 保存历史记录到本地存储\r\n  const saveHistory = () => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(history.value))\r\n    } catch (error) {\r\n      console.error('保存历史记录失败:', error)\r\n    }\r\n  }\r\n\r\n  // 添加新的翻译记录\r\n  const addRecord = (original: string, translated: string) => {\r\n    if (!original.trim() || !translated.trim()) return\r\n\r\n    history.value.unshift({\r\n      original,\r\n      translated,\r\n      timestamp: Date.now()\r\n    })\r\n\r\n    // 限制历史记录长度\r\n    if (history.value.length > MAX_HISTORY_LENGTH) {\r\n      history.value = history.value.slice(0, MAX_HISTORY_LENGTH)\r\n    }\r\n\r\n    saveHistory()\r\n  }\r\n\r\n  // 清空历史记录\r\n  const clearHistory = () => {\r\n    history.value = []\r\n    saveHistory()\r\n  }\r\n\r\n  // 初始化时加载历史记录\r\n  loadHistory()\r\n\r\n  return {\r\n    history,\r\n    addRecord,\r\n    clearHistory\r\n  }\r\n} ","<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\nimport { Microphone, Setting, Delete, Document, Reading, Timer, Edit } from '@element-plus/icons-vue'\nimport { ElMessageBox } from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport { useSpeechRecognition } from './composables/useSpeechRecognition'\nimport { useTranslation } from './composables/useTranslation'\nimport { useHistory } from './composables/useHistory'\n\n// 状态变量\nconst showSettings = ref(false)\nconst fontSize = ref(16)\n\n// 获取本地存储的字体大小设置\nconst savedFontSize = localStorage.getItem('fontSize')\nif (savedFontSize) {\n  fontSize.value = parseInt(savedFontSize)\n}\n\n// 保存字体大小设置\nwatch(fontSize, (newSize) => {\n  localStorage.setItem('fontSize', newSize.toString())\n})\n\n// 初始化各个功能模块\nconst { isRecording, currentText, interimText, startRecording, stopRecording } = useSpeechRecognition()\nconst { translatedText: voiceTranslatedText, isTranslating: isVoiceTranslating, translate: translateVoice } = useTranslation()\nconst { history, addRecord, clearHistory } = useHistory()\n\n// 监听语音识别结果并触发翻译\nwatch([currentText, interimText], async ([newText, newInterimText]) => {\n  // 优先处理最终结果\n  if (newText.trim()) {\n    const result = await translateVoice(newText)\n    if (result && result !== '翻译失败，请重试') {\n      addRecord(newText, result)\n    }\n  } \n  // 处理临时结果\n  else if (newInterimText.trim()) {\n    await translateVoice(newInterimText)\n  }\n})\n\n// 录音控制\nconst toggleRecording = () => {\n  if (isRecording.value) {\n    stopRecording()\n  } else {\n    startRecording()\n  }\n}\n\n// 清空历史记录确认\nconst confirmClearHistory = () => {\n  ElMessageBox.confirm(\n    '确定要清空所有历史记录吗？此操作不可恢复。',\n    '警告',\n    {\n      confirmButtonText: '确定',\n      cancelButtonText: '取消',\n      type: 'warning',\n    }\n  ).then(() => {\n    clearHistory()\n  }).catch(() => {})\n}\n\n// 格式化时间戳\nconst formatTime = (timestamp: number) => {\n  const date = new Date(timestamp)\n  return date.toLocaleString('zh-CN', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  })\n}\n\n// 手动翻译相关\nconst { translatedText: manualTranslatedText, isTranslating: isManualTranslating, translate: translateManual } = useTranslation()\nconst manualInput = ref('')\n\n// 手动翻译\nconst handleManualTranslate = async () => {\n  if (!manualInput.value.trim()) return\n  \n  const result = await translateManual(manualInput.value)\n  if (result && result !== '翻译失败，请重试') {\n    addRecord(manualInput.value, result)\n    manualInput.value = '' // 清空输入框\n  }\n}\n</script>\n\n<template>\n  <div class=\"app-container\">\n    <el-config-provider>\n      <el-container class=\"main-container\">\n        <el-header height=\"80px\">\n          <div class=\"header-content\">\n            <h1 class=\"app-title\">实时翻译助手</h1>\n            <div class=\"controls\">\n              <el-button \n                type=\"primary\" \n                :icon=\"Microphone\" \n                @click=\"toggleRecording\"\n                :class=\"{ 'recording': isRecording }\"\n                size=\"large\"\n                class=\"control-button\"\n              >\n                {{ isRecording ? '停止录音' : '开始录音' }}\n              </el-button>\n              <el-button \n                type=\"info\" \n                :icon=\"Setting\" \n                @click=\"showSettings = true\"\n                size=\"large\"\n                class=\"control-button\"\n              >\n                设置\n              </el-button>\n              <el-button \n                type=\"danger\" \n                :icon=\"Delete\" \n                @click=\"confirmClearHistory\"\n                size=\"large\"\n                class=\"control-button\"\n              >\n                清空历史\n              </el-button>\n            </div>\n          </div>\n        </el-header>\n        \n        <el-main>\n          <!-- 语音翻译区域 -->\n          <div class=\"translation-container\" :style=\"{ fontSize: fontSize + 'px' }\">\n            <div class=\"text-panel original-text\">\n              <div class=\"panel-header\">\n                <el-icon><Document /></el-icon>\n                <h3>语音原文</h3>\n              </div>\n              <div class=\"text-content\" v-loading=\"isRecording\">\n                <el-scrollbar height=\"100%\">\n                  <transition name=\"fade\">\n                    <div v-if=\"currentText || interimText\" class=\"text\">\n                      <p>{{ currentText }}</p>\n                      <p v-if=\"interimText\" class=\"interim\">{{ interimText }}</p>\n                    </div>\n                    <p v-else class=\"placeholder\">等待语音输入...</p>\n                  </transition>\n                </el-scrollbar>\n              </div>\n            </div>\n            <div class=\"text-panel translated-text\">\n              <div class=\"panel-header\">\n                <el-icon><Reading /></el-icon>\n                <h3>语音译文</h3>\n              </div>\n              <div class=\"text-content\" v-loading=\"isVoiceTranslating\">\n                <el-scrollbar height=\"100%\">\n                  <transition name=\"fade\">\n                    <p v-if=\"voiceTranslatedText\" class=\"text\">{{ voiceTranslatedText }}</p>\n                    <p v-else class=\"placeholder\">等待翻译...</p>\n                  </transition>\n                </el-scrollbar>\n              </div>\n            </div>\n          </div>\n\n          <!-- 手动翻译区域 -->\n          <div class=\"manual-section\">\n            <div class=\"manual-input-container\">\n              <div class=\"manual-header\">\n                <el-icon><Edit /></el-icon>\n                <h3>手动输入翻译</h3>\n              </div>\n              <div class=\"manual-content\">\n                <el-input\n                  v-model=\"manualInput\"\n                  placeholder=\"输入需要翻译的英文内容\"\n                  :suffix-icon=\"Edit\"\n                  clearable\n                  @keyup.enter=\"handleManualTranslate\"\n                >\n                  <template #append>\n                    <el-button \n                      type=\"primary\" \n                      @click=\"handleManualTranslate\"\n                      :loading=\"isManualTranslating\"\n                    >\n                      翻译\n                    </el-button>\n                  </template>\n                </el-input>\n              </div>\n            </div>\n\n            <div class=\"manual-result-container\" v-show=\"manualTranslatedText\">\n              <div class=\"panel-header\">\n                <el-icon><Reading /></el-icon>\n                <h3>翻译结果</h3>\n              </div>\n              <div class=\"manual-result-content\" v-loading=\"isManualTranslating\">\n                <p class=\"text\">{{ manualTranslatedText }}</p>\n              </div>\n            </div>\n          </div>\n        </el-main>\n\n        <el-footer height=\"auto\">\n          <!-- 历史记录区域 -->\n          <div class=\"history-container\">\n            <div class=\"history-header\">\n              <el-icon><Timer /></el-icon>\n              <h3>历史记录</h3>\n            </div>\n            <el-scrollbar height=\"150px\">\n              <transition-group name=\"list\" tag=\"div\" class=\"history-list\">\n                <div v-for=\"(item, index) in history\" \n                     :key=\"item.timestamp\" \n                     class=\"history-item\"\n                     :style=\"{ animationDelay: index * 0.1 + 's' }\"\n                >\n                  <div class=\"history-item-header\">\n                    <span class=\"timestamp\">{{ formatTime(item.timestamp) }}</span>\n                  </div>\n                  <p class=\"original\">{{ item.original }}</p>\n                  <p class=\"translated\">{{ item.translated }}</p>\n                </div>\n              </transition-group>\n            </el-scrollbar>\n          </div>\n        </el-footer>\n      </el-container>\n\n      <!-- 设置对话框 -->\n      <el-dialog v-model=\"showSettings\" title=\"设置\" width=\"400px\" align-center>\n        <div class=\"settings-content\">\n          <el-form label-position=\"top\">\n            <el-form-item label=\"字体大小\">\n              <div class=\"font-size-preview\" :style=\"{ fontSize: fontSize + 'px' }\">\n                预览文本大小\n              </div>\n              <el-slider \n                v-model=\"fontSize\" \n                :min=\"12\" \n                :max=\"32\" \n                :step=\"2\"\n                show-input\n              />\n            </el-form-item>\n          </el-form>\n        </div>\n      </el-dialog>\n    </el-config-provider>\n  </div>\n</template>\n\n<style scoped>\n.app-container {\n  height: 100vh;\n  width: 100vw;\n  background-color: #f5f7fa;\n}\n\n.main-container {\n  height: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  background-color: #fff;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.header-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%;\n  padding: 0 20px;\n}\n\n.app-title {\n  font-size: 24px;\n  color: #303133;\n  margin: 0;\n}\n\n.controls {\n  display: flex;\n  gap: 12px;\n}\n\n.control-button {\n  min-width: 120px;\n}\n\n.recording {\n  animation: pulse 1.5s infinite;\n  background-color: #f56c6c;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.translation-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 24px;\n  padding: 20px;\n  height: auto;\n  min-height: 300px;\n}\n\n.text-panel {\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.panel-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 16px;\n  background-color: #f5f7fa;\n  border-bottom: 1px solid #e4e7ed;\n}\n\n.panel-header h3 {\n  margin: 0;\n  font-size: 16px;\n  color: #303133;\n}\n\n.text-content {\n  flex: 1;\n  padding: 20px;\n  background-color: #fff;\n  position: relative;\n  height: calc(100vh - 400px);\n  min-height: 300px;\n}\n\n.text {\n  margin: 0;\n  line-height: 1.6;\n  white-space: pre-wrap;\n  padding: 0 10px;\n}\n\n.placeholder {\n  color: #909399;\n  font-style: italic;\n  padding: 0 10px;\n}\n\n.history-container {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 -2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.history-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.history-header h3 {\n  margin: 0;\n  font-size: 16px;\n  color: #303133;\n}\n\n.history-list {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.history-item {\n  padding: 12px;\n  border-radius: 6px;\n  background-color: #f5f7fa;\n  transition: all 0.3s ease;\n  animation: slideIn 0.3s ease-out forwards;\n}\n\n.history-item:hover {\n  transform: translateX(4px);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.history-item-header {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 8px;\n}\n\n.timestamp {\n  font-size: 12px;\n  color: #909399;\n}\n\n.history-item .original {\n  margin: 0 0 8px 0;\n  color: #606266;\n}\n\n.history-item .translated {\n  margin: 0;\n  color: #409eff;\n  font-weight: 500;\n}\n\n.font-size-preview {\n  margin-bottom: 16px;\n  padding: 12px;\n  background-color: #f5f7fa;\n  border-radius: 4px;\n  text-align: center;\n  color: #606266;\n}\n\n/* 过渡动画 */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.3s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(-20px);\n}\n\n:deep(.el-header) {\n  background-color: #fff;\n  border-bottom: 1px solid #dcdfe6;\n  padding: 0;\n}\n\n:deep(.el-footer) {\n  height: auto !important;\n  padding: 0;\n  background-color: #f5f7fa;\n}\n\n:deep(.el-main) {\n  padding: 20px;\n  overflow-y: auto;\n}\n\n.manual-section {\n  margin-top: 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.manual-input-container {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.manual-result-container {\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n.manual-result-content {\n  padding: 20px;\n  min-height: 60px;\n  background-color: #fff;\n}\n\n.manual-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.manual-header h3 {\n  margin: 0;\n  font-size: 16px;\n  color: #303133;\n}\n\n.manual-content {\n  display: flex;\n  gap: 12px;\n}\n\n:deep(.el-input-group__append) {\n  padding: 0;\n}\n\n:deep(.el-input-group__append button) {\n  border: none;\n  margin: 0;\n  height: 100%;\n  padding: 0 20px;\n}\n\n.interim {\n  color: #909399;\n  font-style: italic;\n  margin-top: 8px;\n}\n</style>\n","import { createApp } from 'vue'\nimport './style.css'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.use(ElementPlus)\napp.mount('#app')\n"],"names":["useSpeechRecognition","isRecording","ref","currentText","interimText","recognition","initRecognition","event","finalTranscript","interimTranscript","i","stopRecording","startRecording","API_KEY","REGION","formatTranslatedText","text","useTranslation","translatedText","isTranslating","response","result","_b","_a","formattedResult","error","STORAGE_KEY","MAX_HISTORY_LENGTH","useHistory","history","loadHistory","savedHistory","saveHistory","addRecord","original","translated","clearHistory","showSettings","fontSize","savedFontSize","watch","newSize","voiceTranslatedText","isVoiceTranslating","translateVoice","newText","newInterimText","toggleRecording","confirmClearHistory","ElMessageBox","formatTime","timestamp","manualTranslatedText","isManualTranslating","translateManual","manualInput","handleManualTranslate","app","createApp","App","ElementPlus"],"mappings":"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"}